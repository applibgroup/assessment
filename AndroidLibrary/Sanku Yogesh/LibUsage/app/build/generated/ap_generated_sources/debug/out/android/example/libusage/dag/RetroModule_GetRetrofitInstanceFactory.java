// Generated by Dagger (https://dagger.dev).
package android.example.libusage.dag;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetroModule_GetRetrofitInstanceFactory implements Factory<Retrofit> {
  private final RetroModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  public RetroModule_GetRetrofitInstanceFactory(RetroModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
  }

  @Override
  public Retrofit get() {
    return getRetrofitInstance(module, okHttpClientProvider.get(), gsonConverterFactoryProvider.get());
  }

  public static RetroModule_GetRetrofitInstanceFactory create(RetroModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider) {
    return new RetroModule_GetRetrofitInstanceFactory(module, okHttpClientProvider, gsonConverterFactoryProvider);
  }

  public static Retrofit getRetrofitInstance(RetroModule instance, OkHttpClient okHttpClient,
      GsonConverterFactory gsonConverterFactory) {
    return Preconditions.checkNotNullFromProvides(instance.getRetrofitInstance(okHttpClient, gsonConverterFactory));
  }
}
