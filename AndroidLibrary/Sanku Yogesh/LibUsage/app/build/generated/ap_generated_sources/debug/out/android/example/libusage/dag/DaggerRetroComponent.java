// Generated by Dagger (https://dagger.dev).
package android.example.libusage.dag;

import android.example.libusage.MainActivityViewModel;
import android.example.libusage.MainActivityViewModel_MembersInjector;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRetroComponent implements RetroComponent {
  private final DaggerRetroComponent retroComponent = this;

  private Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private Provider<OkHttpClient> okHttpClientProvider;

  private Provider<Gson> gsonProvider;

  private Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  private Provider<Retrofit> getRetrofitInstanceProvider;

  private Provider<RetroServiceInterface> getRetroServiceInterfaceProvider;

  private DaggerRetroComponent(RetroModule retroModuleParam) {

    initialize(retroModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static RetroComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RetroModule retroModuleParam) {
    this.httpLoggingInterceptorProvider = RetroModule_HttpLoggingInterceptorFactory.create(retroModuleParam);
    this.okHttpClientProvider = DoubleCheck.provider(RetroModule_OkHttpClientFactory.create(retroModuleParam, httpLoggingInterceptorProvider));
    this.gsonProvider = DoubleCheck.provider(RetroModule_GsonFactory.create(retroModuleParam));
    this.gsonConverterFactoryProvider = DoubleCheck.provider(RetroModule_GsonConverterFactoryFactory.create(retroModuleParam, gsonProvider));
    this.getRetrofitInstanceProvider = DoubleCheck.provider(RetroModule_GetRetrofitInstanceFactory.create(retroModuleParam, okHttpClientProvider, gsonConverterFactoryProvider));
    this.getRetroServiceInterfaceProvider = DoubleCheck.provider(RetroModule_GetRetroServiceInterfaceFactory.create(retroModuleParam, getRetrofitInstanceProvider));
  }

  @Override
  public void inject(MainActivityViewModel mainActivityViewModel) {
    injectMainActivityViewModel(mainActivityViewModel);
  }

  private MainActivityViewModel injectMainActivityViewModel(MainActivityViewModel instance) {
    MainActivityViewModel_MembersInjector.injectMService(instance, getRetroServiceInterfaceProvider.get());
    return instance;
  }

  public static final class Builder {
    private RetroModule retroModule;

    private Builder() {
    }

    public Builder retroModule(RetroModule retroModule) {
      this.retroModule = Preconditions.checkNotNull(retroModule);
      return this;
    }

    public RetroComponent build() {
      if (retroModule == null) {
        this.retroModule = new RetroModule();
      }
      return new DaggerRetroComponent(retroModule);
    }
  }
}
